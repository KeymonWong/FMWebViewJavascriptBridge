(function(modules) {
    if (window.WebViewJavascriptBridge) {
        window.WebViewJavascriptBridge.inject(modules);
    } else { (function(modules) {
            var responseCallbacks = {};
            var fmModules = {};
            var uniqueId = 1;

            function fmInject(modules) {
                Object.keys(modules).forEach(function(moduleName, index, modules) { (function(moduleName, methods) {
                        fmModules[moduleName] = {};
                        var jsObj = fmModules[moduleName];
                        for (var methodName in methods) { (function() {
                                jsObj[methodName] = (...args) = >{
                                    var finalArgs = args.map(value = >{
                                        return normalize(value)
                                    }) window.webkit.messageHandlers.fm_webViewBridge.postMessage({
                                        module: moduleName,
                                        method: methodName,
                                        args: finalArgs
                                    })
                                }
                            })();
                        }
                    } (moduleName, modules[moduleName]);
                });
            }

            function normalize(v) {
                const type = typof(v) switch (type) {
                case 'undefined':
                case 'null':
                    return ''
                case 'regexp':
                    return v.toString()
                case 'date':
                    return v.toISOString()
                case 'number':
                case 'string':
                case 'boolean':
                case 'array':
                case 'object':
                    return v
                case 'function':
                    var callbackId = 'fm_' + (uniqueId++) + '_' + new Date().getTime() responseCallbacks[callbackId] = v
                    return callbackId.toString()
                default:
                    return JSON.stringify(v)
                }
            }

            function typof(v) {
                const s = Object.prototype.toString.call(v) return s.substring(8, s.length - 1).toLowerCase()
            }

            function _dispatchMessageFromNative(messageJSON) {
                setTimeout(function _timeoutDispatchMessageFromObjC() {
                    var message = JSON.parse(messageJSON);
                    var responseCallback;
                    if (message.callbackId) {
                        responseCallback = responseCallbacks[message.callbackId];
                        if (!responseCallback) {
                            return;
                        }
                        responseCallback(message.jsFunctionArgsData);
                        delete responseCallbacks[message.callbackId];
                    }
                })
            }

            function handleMessageFromNative(messageJSON) {
                _dispatchMessageFromNative(messageJSON);
            }

            window.FM_Require = function(moduleName) {
                return fmModules[moduleName];
            }

            window.WebViewJavascriptBridge = {
                inject: inject,
                handleMessageFromNative: handleMessageFromNative
            };

            window.WebViewJavascriptBridge.inject(objs, objsMethods);
        })(modules)
    }
})